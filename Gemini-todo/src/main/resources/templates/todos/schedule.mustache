<!DOCTYPE html>
<html>
<head>
    <title>Scheduled Todos</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 800px; margin: auto; }
        h1 { text-align: center; color: #333; }
        ul { list-style: none; padding: 0; }
        li { background: #fff; padding: 15px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
        li:last-child { border-bottom: none; }
        .todo-title { flex-grow: 1; }
        .todo-status { margin-left: 10px; font-weight: bold; }
        .todo-deadline { font-size: 0.9em; color: #666; margin-left: 10px; }
        .todo-actions button { background: #f0ad4e; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-left: 5px; }
        .todo-actions button.delete { background: #d9534f; }
        .todo-actions button:hover { opacity: 0.9; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Scheduled Todos</h1>

        <ul id="todoList">
            <!-- Todos will be rendered here -->
        </ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const todoList = document.getElementById('todoList');

            // Function to fetch and display todos
            async function fetchTodos() {
                try {
                    const response = await fetch('/api/todos/index'); // Fetch all todos
                    const todos = await response.json();
                    todoList.innerHTML = ''; // Clear existing list
                    todos.forEach(todo => {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `
                            <span class="todo-title">${todo.title}</span>
                            <span class="todo-deadline">${todo.deadline ? todo.deadline : ''}</span>
                            <span class="todo-status">${todo.status}</span>
                            <div class="todo-actions">
                                <button data-id="${todo.id}" data-status="${todo.status}" class="toggle-status">${todo.status === '준비' ? '완료로 변경' : '준비로 변경'}</button>
                                <button data-id="${todo.id}" class="delete">삭제</button>
                            </div>
                        `;
                        todoList.appendChild(listItem);
                    });
                } catch (error) {
                    console.error('Error fetching todos:', error);
                }
            }

            // Initial fetch of todos
            fetchTodos();

            // Event listener for toggling todo status (delegation)
            todoList.addEventListener('click', async function(event) {
                if (event.target.classList.contains('toggle-status')) {
                    const todoId = event.target.dataset.id;
                    const currentStatus = event.target.dataset.status;
                    const newStatus = currentStatus === '준비' ? '완료' : '준비';

                    try {
                        const response = await fetch(`/api/todos/index/updateStatus/${todoId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(newStatus)
                        });

                        if (response.ok) {
                            fetchTodos(); // Refresh the list
                        } else {
                            const errorData = await response.json();
                            alert('상태 변경 실패: ' + (errorData.message || response.statusText));
                        }
                    } catch (error) {
                        console.error('Error toggling status:', error);
                        alert('상태 변경 중 오류가 발생했습니다.');
                    }
                } else if (event.target.classList.contains('delete')) {
                    const todoId = event.target.dataset.id;
                    if (confirm('정말로 이 할 일을 삭제하시겠습니까?')) {
                        try {
                            const response = await fetch(`/api/todos/index/task/${todoId}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                fetchTodos(); // Refresh the list
                            } else {
                                const errorData = await response.json();
                                alert('할 일 삭제 실패: ' + (errorData.message || response.statusText));
                            }
                        } catch (error) {
                            console.error('Error deleting todo:', error);
                            alert('할 일 삭제 중 오류가 발생했습니다.');
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>